apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven-publish'
apply plugin: "de.mannodermaus.android-junit5"
apply plugin: 'kotlin-parcelize'

repositories {
    mavenCentral()
    google()
    maven { url "https://jitpack.io" }
}

group = 'com.github.thementalgoose'

android {
    compileSdkVersion 34

    namespace "tmg.aboutthisapp"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildFeatures {
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
        androidTest.resources.srcDirs += 'src/androidTest/res'
        test.java.srcDirs += 'src/test/java'
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            all {
                afterSuite { desc, result ->
                    if (!desc.parent) {
                        println "\n======================================================================="
                        println "${desc.displayName}"
                        println "Test result: ${result.resultType}"
                        println "Test summary: ${result.testCount} tests, " +
                                "${result.successfulTestCount} succeeded, " +
                                "${result.failedTestCount} failed, " +
                                "${result.skippedTestCount} skipped"
                        println "======================================================================="
                    }
                }
                useJUnitPlatform()
                testLogging {
                    events "passed", "skipped", "failed", "standardOut", "standardError"
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.core:core-ktx:1.12.0'

    // Glide
    implementation 'de.hdodenhof:circleimageview:3.1.0'

    // Circle Image View
    implementation 'com.github.bumptech.glide:glide:4.12.0'

    // AndroidX
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // Unit tests
    testImplementation "org.junit.jupiter:junit-jupiter:$junit"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$junit"
    testImplementation('org.mockito:mockito-junit-jupiter:3.0.0') {
        exclude group: 'org.junit.jupiter'
    }
    testImplementation "io.mockk:mockk:1.13.5"
}

task androidSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
}

project.afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
            }
        }
    }
}
